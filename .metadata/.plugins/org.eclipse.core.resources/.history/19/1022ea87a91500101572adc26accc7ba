package com.noah.belowthenether.items;

import java.util.Random;

import net.minecraft.core.BlockPos;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.ItemUseAnimation;
import net.minecraft.world.item.context.UseOnContext;
import net.minecraft.world.level.Level;
import net.minecraft.world.phys.Vec3;

public class TimeGyro extends Item {

	public TimeGyro(Properties properties) {
		super(properties);

	}

	// Method for when looking at block
	@Override
	public InteractionResult useOn(UseOnContext context) {
		Player player = context.getPlayer();
		if (player != null) {
			player.startUsingItem(context.getHand());
		}

		return InteractionResult.CONSUME.withoutItem();
	}

	@Override
	public ItemUseAnimation getUseAnimation(ItemStack p_273490_) {
		return ItemUseAnimation.NONE;
	}

	@Override
	public int getUseDuration(ItemStack p_272765_, LivingEntity p_344739_) {
		return 80;
	}

	// Method for when not looking at block
	@Override
	public InteractionResult use(Level level, Player player, InteractionHand hand) {
		player.startUsingItem(hand);

		return InteractionResult.CONSUME.withoutItem();
	}

	@Override
	public void onUseTick(Level level, LivingEntity entity, ItemStack item, int remainingUseDuration) {
		if (remainingUseDuration > 1 && entity instanceof Player player) {

			Vec3 eyePos = player.getEyePosition();
			Vec3 lookVec = player.getLookAngle();
			Vec3 targetPos = eyePos.add(lookVec.scale(8));

			if (level instanceof ServerLevel serverLevel) {
				for (Entity mob : serverLevel.getAllEntities()) {
					if (mob instanceof LivingEntity) {
						Vec3 mobPos = mob.position();
						Vec3 direction = targetPos.subtract(mobPos).normalize();
						double speed = 2.0f;
						mob.setDeltaMovement(direction.scale(speed));
					}

				}

			}
			level.addParticle(ParticleTypes.TOTEM_OF_UNDYING, targetPos.x, targetPos.y, targetPos.z,
					new Random().nextFloat(-1.0f, 1.0f), new Random().nextFloat(0.5f, 2.0f),
					new Random().nextFloat(-1.0f, 1.0f));

		}
	}

}