package com.noah.belowthenether.items;

import net.minecraft.core.BlockPos;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.ItemUseAnimation;
import net.minecraft.world.item.context.UseOnContext;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.state.BlockState;

public class TimeGyro extends Item {

	public TimeGyro(Properties properties) {
		super(properties);

	}

	//Method for when looking at block
	@Override
	public InteractionResult useOn(UseOnContext context) {
		Player player = context.getPlayer();
		if (player != null) {
			player.startUsingItem(context.getHand());
		}

		return InteractionResult.CONSUME.withoutItem();
	}

	@Override
	public ItemUseAnimation getUseAnimation(ItemStack p_273490_) {
		return ItemUseAnimation.BLOCK;
	}

	@Override
	public int getUseDuration(ItemStack p_272765_, LivingEntity p_344739_) {
		return 200;
	}
	
	
	//Method for when not looking at block
	@Override
    public InteractionResult use(Level level, Player player, InteractionHand hand) {
			player.startUsingItem(hand);	
			
		
        return InteractionResult.CONSUME.withoutItem();
    }

	
	@Override
	public void onUseTick(Level level, LivingEntity entity, ItemStack item, int remainingUseDuration) {
		if (remainingUseDuration > 0 && entity instanceof Player player) {

				int i = this.getUseDuration(item, entity) - remainingUseDuration + 1;
				System.out.println("Remaining Use Duration: " + remainingUseDuration);
				BlockPos blockpos = player.blockPosition();
				BlockState blockstate = level.getBlockState(blockpos);

				if(level instanceof ServerLevel serverLevel) {
					serverLevel.tickRateManager().setFrozen(false);
				}

				
			

			} else {
			
				if(level instanceof ServerLevel serverLevel) {
					serverLevel.tickRateManager().setFrozen(false);
				}

			System.out.println("USED");
			entity.releaseUsingItem();
		}
	}
	
}